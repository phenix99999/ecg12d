{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectSpread from\"@babel/runtime/helpers/objectSpread\";import{useState,useEffect}from'react';import DEFAULT_CONFIGURATION from\"./internal/defaultConfiguration\";import State from\"./internal/state\";import*as Types from\"./internal/types\";var _configuration=DEFAULT_CONFIGURATION;var _state=null;var createState=function createState(){return new State(_configuration);};export function configure(configuration){_configuration=_objectSpread({},DEFAULT_CONFIGURATION,configuration);if(_state){_state.tearDown();_state=createState();}}export function fetch(requestedInterface){if(!_state){_state=createState();}return _state.latest(requestedInterface);}export function addEventListener(listener){if(!_state){_state=createState();}_state.add(listener);return function(){_state&&_state.remove(listener);};}export function useNetInfo(configuration){if(configuration){configure(configuration);}var _useState=useState({type:Types.NetInfoStateType.unknown,isConnected:false,isInternetReachable:false,details:null}),_useState2=_slicedToArray(_useState,2),netInfo=_useState2[0],setNetInfo=_useState2[1];useEffect(function(){return addEventListener(setNetInfo);},[]);return netInfo;}export*from\"./internal/types\";export default{configure:configure,fetch:fetch,addEventListener:addEventListener,useNetInfo:useNetInfo};","map":{"version":3,"sources":["index.ts"],"names":["_configuration","_state","createState","configure","netInfo","setNetInfo","useState","type","Types","isConnected","isInternetReachable","details","useEffect","addEventListener","fetch","useNetInfo"],"mappings":"gIASA,OAAA,QAAA,CAAA,SAAA,KAAA,OAAA,CACA,MAAA,CAAA,qBAAA,uCACA,MAAA,CAAA,KAAA,wBACA,MAAO,GAAP,CAAA,KAAA,wBAGA,GAAIA,CAAAA,cAA0C,CAA9C,qBAAA,CAGA,GAAIC,CAAAA,MAAoB,CAAxB,IAAA,CACA,GAAMC,CAAAA,WAAW,CAAXA,QAAAA,CAAAA,WAAAA,EAA2B,CAC/B,MAAO,IAAA,CAAA,KAAA,CAAP,cAAO,CAAP,CADF,CAAA,CAWA,MAAO,SAAA,CAAA,SAAA,CAAA,aAAA,CAEC,CACNF,cAAc,CAAA,aAAA,CAAA,EAAA,CAAA,qBAAA,CAAdA,aAAc,CAAdA,CAKA,GAAA,MAAA,CAAY,CACVC,MAAM,CAANA,QAAAA,GACAA,MAAM,CAAGC,WAATD,EAAAA,CAEH,CASD,OAAO,SAAA,CAAA,KAAA,CAAA,kBAAA,CAEwB,CAC7B,GAAI,CAAJ,MAAA,CAAa,CACXA,MAAM,CAAGC,WAATD,EAAAA,CAEF,OAAOA,CAAAA,MAAM,CAANA,MAAAA,CAAP,kBAAOA,CAAP,CAcF,OAAO,SAAA,CAAA,gBAAA,CAAA,QAAA,CAEsB,CAC3B,GAAI,CAAJ,MAAA,CAAa,CACXA,MAAM,CAAGC,WAATD,EAAAA,CAGFA,CAAAA,MAAM,CAANA,GAAAA,CAAAA,QAAAA,EACA,MAAO,WAAY,CACjBA,MAAM,EAAIA,MAAM,CAANA,MAAAA,CAAVA,QAAUA,CAAVA,CADF,CAAA,CAUF,OAAO,SAAA,CAAA,UAAA,CAAA,aAAA,CAEe,CACpB,GAAA,aAAA,CAAmB,CACjBE,SAAS,CAATA,aAAS,CAATA,CAFkB,IAAA,CAAA,SAAA,CAKUG,QAAQ,CAAqB,CACzDC,IAAI,CAAEC,KAAK,CAALA,gBAAAA,CADmD,OAAA,CAEzDC,WAAW,CAF8C,KAAA,CAGzDC,mBAAmB,CAHsC,KAAA,CAIzDC,OAAO,CATW,IAKuC,CAArB,CALlB,CAAA,UAAA,CAAA,cAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAKbP,OALa,CAAA,UAAA,CAAA,CAAA,CAAA,CAKJC,UALI,CAAA,UAAA,CAAA,CAAA,CAAA,CAYpBO,SAAS,CAAC,UAAoB,CAC5B,MAAOC,CAAAA,gBAAgB,CAAvB,UAAuB,CAAvB,CADO,CAAA,CAATD,EAAS,CAATA,CAIA,MAAA,CAAA,OAAA,CAGF,+BAEA,cAAe,CACbT,SAAS,CADI,SAAA,CAEbW,KAAK,CAFQ,KAAA,CAGbD,gBAAgB,CAHH,gBAAA,CAIbE,UAAU,CAJZ,UAAe,CAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect} from 'react';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration: Types.NetInfoConfiguration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Subscribe to connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook which updates when the connection state changes.\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: false,\n    isInternetReachable: false,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  addEventListener,\n  useNetInfo,\n};\n"]},"metadata":{},"sourceType":"module"}