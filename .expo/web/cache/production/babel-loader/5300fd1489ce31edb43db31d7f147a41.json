{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";var EventBus=function(){_createClass(EventBus,null,[{key:\"getInstance\",value:function getInstance(){if(typeof EventBus.instance==='object'){return EventBus.instance;}return new EventBus();}}]);function EventBus(){_classCallCheck(this,EventBus);if(typeof EventBus.instance==='object'){return EventBus.instance;}EventBus.instance=this;this.eventListeners={};}_createClass(EventBus,[{key:\"fireEvent\",value:function fireEvent(eventName,data){var listeners=this.eventListeners[eventName];if(Array.isArray(listeners)){listeners.map(function(listener){if(typeof listener==='function'){listener(data);}});}}},{key:\"addListener\",value:function addListener(eventName,listener){var listeners=this.eventListeners[eventName];if(Array.isArray(listeners)){listeners.push(listener);}else{this.eventListeners[eventName]=[listener];}}},{key:\"removeListener\",value:function removeListener(listener){var _this=this;Object.keys(this.eventListeners).map(function(eventName){var listeners=_this.eventListeners[eventName];_this._remove(listeners,listener);if(listeners.length===0){delete _this.eventListeners[eventName];}});}},{key:\"_remove\",value:function _remove(array,item){if(!array)return;for(var i=0,l=array.length;i<l;i++){if(item===array[i])array.splice(i,1);}}}]);return EventBus;}();export{EventBus as default};","map":{"version":3,"sources":["/Users/lyestamazouzt/Projects/CoffretsPrestige/node_modules/react-native-event-bus/index.js"],"names":["EventBus","instance","eventListeners","eventName","data","listeners","Array","isArray","map","listener","push","Object","keys","_remove","length","array","item","i","l","splice"],"mappings":"mIAIqBA,CAAAA,Q,uFACI,CACjB,GAAI,MAAOA,CAAAA,QAAQ,CAACC,QAAhB,GAA6B,QAAjC,CAA2C,CACvC,MAAOD,CAAAA,QAAQ,CAACC,QAAhB,CACH,CACD,MAAO,IAAID,CAAAA,QAAJ,EAAP,CACH,C,IAED,mBAAc,gCACV,GAAI,MAAOA,CAAAA,QAAQ,CAACC,QAAhB,GAA6B,QAAjC,CAA2C,CACvC,MAAOD,CAAAA,QAAQ,CAACC,QAAhB,CACH,CACDD,QAAQ,CAACC,QAAT,CAAoB,IAApB,CACA,KAAKC,cAAL,CAAsB,EAAtB,CACH,C,iEAOSC,S,CAAWC,I,CAAM,CACvB,GAAIC,CAAAA,SAAS,CAAG,KAAKH,cAAL,CAAoBC,SAApB,CAAhB,CACA,GAAIG,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAJ,CAA8B,CAC1BA,SAAS,CAACG,GAAV,CAAc,SAAAC,QAAQ,CAAI,CACtB,GAAI,MAAOA,CAAAA,QAAP,GAAoB,UAAxB,CAAoC,CAChCA,QAAQ,CAACL,IAAD,CAAR,CACH,CACJ,CAJD,EAKH,CACJ,C,gDAOWD,S,CAAWM,Q,CAAU,CAC7B,GAAIJ,CAAAA,SAAS,CAAG,KAAKH,cAAL,CAAoBC,SAApB,CAAhB,CACA,GAAIG,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAJ,CAA8B,CAC1BA,SAAS,CAACK,IAAV,CAAeD,QAAf,EACH,CAFD,IAEO,CACH,KAAKP,cAAL,CAAoBC,SAApB,EAAiC,CAACM,QAAD,CAAjC,CACH,CACJ,C,sDAMcA,Q,CAAU,gBACrBE,MAAM,CAACC,IAAP,CAAY,KAAKV,cAAjB,EAAiCM,GAAjC,CAAqC,SAAAL,SAAS,CAAI,CAC9C,GAAIE,CAAAA,SAAS,CAAG,KAAI,CAACH,cAAL,CAAoBC,SAApB,CAAhB,CACA,KAAI,CAACU,OAAL,CAAaR,SAAb,CAAwBI,QAAxB,EACA,GAAIJ,SAAS,CAACS,MAAV,GAAqB,CAAzB,CAA4B,CACxB,MAAO,CAAA,KAAI,CAACZ,cAAL,CAAoBC,SAApB,CAAP,CACH,CACJ,CAND,EAOH,C,wCAKOY,K,CAAOC,I,CAAM,CACjB,GAAI,CAACD,KAAL,CAAY,OACZ,IAAK,GAAIE,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAC,CAAGH,KAAK,CAACD,MAA1B,CAAkCG,CAAC,CAAGC,CAAtC,CAAyCD,CAAC,EAA1C,CAA8C,CAC1C,GAAID,IAAI,GAAKD,KAAK,CAACE,CAAD,CAAlB,CAAuBF,KAAK,CAACI,MAAN,CAAaF,CAAb,CAAgB,CAAhB,EAC1B,CACJ,C,+BApEgBjB,Q","sourcesContent":["/**\n * 事件总线，跨界面通信解决方案\n * {eventName1:[listener1,listener2],eventName2:[listener3,listener4]}\n */\nexport default class EventBus {\n    static getInstance() {\n        if (typeof EventBus.instance === 'object') {\n            return EventBus.instance;\n        }\n        return new EventBus();\n    }\n\n    constructor() {\n        if (typeof EventBus.instance === 'object') {\n            return EventBus.instance;\n        }\n        EventBus.instance = this;\n        this.eventListeners = {};\n    }\n\n    /**\n     * 发送事件\n     * @param eventName 事件名 string\n     * @param data 要发送的数据\n     */\n    fireEvent(eventName, data) {\n        let listeners = this.eventListeners[eventName];\n        if (Array.isArray(listeners)) {\n            listeners.map(listener => {\n                if (typeof listener === 'function') {\n                    listener(data);\n                }\n            })\n        }\n    }\n\n    /**\n     * 注册事件监听器\n     * @param eventName 事件名 string\n     * @param listener 监听回调 function\n     */\n    addListener(eventName, listener) {\n        let listeners = this.eventListeners[eventName];\n        if (Array.isArray(listeners)) {\n            listeners.push(listener);\n        } else {\n            this.eventListeners[eventName] = [listener];\n        }\n    }\n\n    /**\n     * 移除监听器\n     * @param listener 监听回调 function\n     */\n    removeListener(listener) {\n        Object.keys(this.eventListeners).map(eventName => {\n            let listeners = this.eventListeners[eventName];\n            this._remove(listeners, listener);\n            if (listeners.length === 0) {\n                delete this.eventListeners[eventName];\n            }\n        })\n    }\n\n    /**\n     * 将数组中指定元素移除\n     * **/\n    _remove(array, item) {\n        if (!array) return;\n        for (let i = 0, l = array.length; i < l; i++) {\n            if (item === array[i]) array.splice(i, 1);\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}