{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _objectSpread from\"@babel/runtime/helpers/objectSpread\";import{DEVICE_CONNECTIVITY_EVENT}from\"./privateTypes\";import{NetInfoStateType,NetInfoCellularGeneration}from\"./types\";var connection=window.navigator.connection||window.navigator.mozConnection||window.navigator.webkitConnection;var typeMapping={bluetooth:NetInfoStateType.bluetooth,cellular:NetInfoStateType.cellular,ethernet:NetInfoStateType.ethernet,none:NetInfoStateType.none,other:NetInfoStateType.other,unknown:NetInfoStateType.unknown,wifi:NetInfoStateType.wifi,wimax:NetInfoStateType.wimax,mixed:NetInfoStateType.other};var effectiveTypeMapping={'2g':NetInfoCellularGeneration['2g'],'3g':NetInfoCellularGeneration['3g'],'4g':NetInfoCellularGeneration['4g'],'slow-2g':NetInfoCellularGeneration['2g']};var _getCurrentState=function getCurrentState(_requestedInterface){var isConnected=navigator.onLine;var baseState={isInternetReachable:null};if(!connection){if(isConnected){var _state2=_objectSpread({},baseState,{isConnected:true,type:NetInfoStateType.other,details:{isConnectionExpensive:false}});return _state2;}var _state=_objectSpread({},baseState,{isConnected:false,isInternetReachable:false,type:NetInfoStateType.none,details:null});return _state;}var isConnectionExpensive=connection.saveData;var type=connection.type?typeMapping[connection.type]:isConnected?NetInfoStateType.other:NetInfoStateType.unknown;if(type===NetInfoStateType.bluetooth){var _state3=_objectSpread({},baseState,{isConnected:true,type:type,details:{isConnectionExpensive:isConnectionExpensive}});return _state3;}else if(type===NetInfoStateType.cellular){var _state4=_objectSpread({},baseState,{isConnected:true,type:type,details:{isConnectionExpensive:isConnectionExpensive,cellularGeneration:effectiveTypeMapping[connection.effectiveType]||null,carrier:null}});return _state4;}else if(type===NetInfoStateType.ethernet){var _state5=_objectSpread({},baseState,{isConnected:true,type:type,details:{isConnectionExpensive:isConnectionExpensive,ipAddress:null,subnet:null}});return _state5;}else if(type===NetInfoStateType.wifi){var _state6=_objectSpread({},baseState,{isConnected:true,type:type,details:{isConnectionExpensive:isConnectionExpensive,ssid:null,bssid:null,strength:null,ipAddress:null,subnet:null,frequency:null}});return _state6;}else if(type===NetInfoStateType.wimax){var _state7=_objectSpread({},baseState,{isConnected:true,type:type,details:{isConnectionExpensive:isConnectionExpensive}});return _state7;}else if(type===NetInfoStateType.none){var _state8=_objectSpread({},baseState,{isConnected:false,isInternetReachable:false,type:type,details:null});return _state8;}else if(type===NetInfoStateType.unknown){var _state9=_objectSpread({},baseState,{isConnected:false,isInternetReachable:false,type:type,details:null});return _state9;}var state=_objectSpread({},baseState,{isConnected:true,type:NetInfoStateType.other,details:{isConnectionExpensive:isConnectionExpensive}});return state;};var handlers=[];var nativeHandlers=[];var RNCNetInfo={addListener:function addListener(type,handler){switch(type){case DEVICE_CONNECTIVITY_EVENT:{var nativeHandler=function nativeHandler(){handler(_getCurrentState());};if(connection){connection.addEventListener('change',nativeHandler);}else{window.addEventListener('online',nativeHandler,false);window.addEventListener('offline',nativeHandler,false);}handlers.push(handler);nativeHandlers.push(nativeHandler);break;}}},removeListeners:function removeListeners(type,handler){switch(type){case DEVICE_CONNECTIVITY_EVENT:{var index=handlers.indexOf(handler);var nativeHandler=nativeHandlers[index];if(connection){connection.removeEventListener('change',nativeHandler);}else{window.addEventListener('online',nativeHandler);window.addEventListener('offline',nativeHandler);}handlers.splice(index,1);nativeHandlers.splice(index,1);break;}}},getCurrentState:function getCurrentState(requestedInterface){return _regeneratorRuntime.async(function getCurrentState$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",_getCurrentState(requestedInterface));case 1:case\"end\":return _context.stop();}}},null,this);}};export default RNCNetInfo;","map":{"version":3,"sources":["nativeModule.web.ts"],"names":["connection","window","typeMapping","bluetooth","NetInfoStateType","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","NetInfoCellularGeneration","getCurrentState","isConnected","navigator","baseState","isInternetReachable","state","type","details","isConnectionExpensive","cellularGeneration","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","handlers","nativeHandlers","RNCNetInfo","addListener","nativeHandler","handler","removeListeners","index"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  NetInfoNativeModule,\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoNoConnectionState,\n  NetInfoCellularState,\n  NetInfoBluetoothState,\n  NetInfoEthernetState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n  NetInfoOtherState,\n  NetInfoCellularGeneration,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n\n// Check if the browser supports the connection API\nconst connection =\n  window.navigator.connection ||\n  window.navigator.mozConnection ||\n  window.navigator.webkitConnection;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = navigator.onLine;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          window.addEventListener('online', nativeHandler, false);\n          window.addEventListener('offline', nativeHandler, false);\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          window.addEventListener('online', nativeHandler);\n          window.addEventListener('offline', nativeHandler);\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n};\n\nexport default RNCNetInfo;\n"]},"metadata":{},"sourceType":"module"}