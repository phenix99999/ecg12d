{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import React from'react';import createElement from\"react-native-web/dist/exports/createElement\";import unstable_createElement from\"react-native-web/dist/exports/createElement\";import PickerItem from\"./PickerItem\";import{forwardRef,useRef}from'react';var myCreateElement=createElement||unstable_createElement;var Select=forwardRef(function(props,forwardedRef){return myCreateElement('select',props);});var Picker=forwardRef(function(props,forwardedRef){var enabled=props.enabled,onValueChange=props.onValueChange,selectedValue=props.selectedValue,itemStyle=props.itemStyle,mode=props.mode,prompt=props.prompt,dropdownIconColor=props.dropdownIconColor,other=_objectWithoutProperties(props,[\"enabled\",\"onValueChange\",\"selectedValue\",\"itemStyle\",\"mode\",\"prompt\",\"dropdownIconColor\"]);var hostRef=useRef(null);var handleChange=React.useCallback(function(e){var _e$target=e.target,selectedIndex=_e$target.selectedIndex,value=_e$target.value;if(onValueChange){onValueChange(value,selectedIndex);}},[onValueChange]);return React.createElement(Select,_extends({disabled:enabled===false?true:undefined,onChange:handleChange,ref:hostRef,value:selectedValue},other));});Picker.Item=PickerItem;export default Picker;","map":{"version":3,"sources":["/Users/lyestamazouzt/Projects/CoffretsPrestige/node_modules/@react-native-picker/picker/js/Picker.web.js"],"names":["React","PickerItem","forwardRef","useRef","myCreateElement","createElement","unstable_createElement","Select","props","forwardedRef","Picker","enabled","onValueChange","selectedValue","itemStyle","mode","prompt","dropdownIconColor","other","hostRef","handleChange","useCallback","e","target","selectedIndex","value","undefined","Item"],"mappings":"0IAOA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,uJAQA,MAAOC,CAAAA,UAAP,oBACA,OAAQC,UAAR,CAAoBC,MAApB,KAAiC,OAAjC,CAoBA,GAAMC,CAAAA,eAAe,CAAGC,aAAa,EAAIC,sBAAzC,CAEA,GAAMC,CAAAA,MAAM,CAAGL,UAAU,CAAC,SAACM,KAAD,CAAaC,YAAb,QACxBL,CAAAA,eAAe,CAAC,QAAD,CAAWI,KAAX,CADS,EAAD,CAAzB,CAIA,GAAME,CAAAA,MAAM,CAAGR,UAAU,CAAiB,SAACM,KAAD,CAAQC,YAAR,CAAyB,IAE/DE,CAAAA,OAF+D,CAU7DH,KAV6D,CAE/DG,OAF+D,CAG/DC,aAH+D,CAU7DJ,KAV6D,CAG/DI,aAH+D,CAI/DC,aAJ+D,CAU7DL,KAV6D,CAI/DK,aAJ+D,CAK/DC,SAL+D,CAU7DN,KAV6D,CAK/DM,SAL+D,CAM/DC,IAN+D,CAU7DP,KAV6D,CAM/DO,IAN+D,CAO/DC,MAP+D,CAU7DR,KAV6D,CAO/DQ,MAP+D,CAQ/DC,iBAR+D,CAU7DT,KAV6D,CAQ/DS,iBAR+D,CAS5DC,KAT4D,0BAU7DV,KAV6D,8FAYjE,GAAMW,CAAAA,OAAO,CAAGhB,MAAM,CAAC,IAAD,CAAtB,CAEA,GAAMiB,CAAAA,YAAY,CAAGpB,KAAK,CAACqB,WAAN,CACnB,SAACC,CAAD,CAAe,eACkBA,CAAC,CAACC,MADpB,CACNC,aADM,WACNA,aADM,CACSC,KADT,WACSA,KADT,CAEb,GAAIb,aAAJ,CAAmB,CACjBA,aAAa,CAACa,KAAD,CAAQD,aAAR,CAAb,CACD,CACF,CANkB,CAOnB,CAACZ,aAAD,CAPmB,CAArB,CAUA,MAEE,qBAAC,MAAD,WACE,QAAQ,CAAED,OAAO,GAAK,KAAZ,CAAoB,IAApB,CAA2Be,SADvC,CAEE,QAAQ,CAAEN,YAFZ,CAGE,GAAG,CAAED,OAHP,CAIE,KAAK,CAAEN,aAJT,EAKMK,KALN,EAFF,CAUD,CAlCwB,CAAzB,CAqCAR,MAAM,CAACiB,IAAP,CAAc1B,UAAd,CAEA,cAAeS,CAAAA,MAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n * @format\n */\n\nimport React from 'react';\nimport type {\n  ViewStyleProp,\n  TextStyleProp,\n} from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport type {ViewProps} from 'react-native/Libraries/Components/View/ViewPropTypes';\n// $FlowFixMe\nimport {createElement, unstable_createElement} from 'react-native';\nimport PickerItem from './PickerItem';\nimport {forwardRef, useRef} from 'react';\n\ntype PickerProps = {\n  ...ViewProps,\n  children?: typeof PickerItem | Array<typeof PickerItem>,\n  enabled?: boolean,\n  onValueChange?: (number | string, number) => void,\n  selectedValue?: number | string,\n  style?: ViewStyleProp,\n  /**\n   * dropdownIconColor\n   * Not used for Web.\n   */\n  dropdownIconColor?: string,\n  /* compat */\n  itemStyle?: TextStyleProp,\n  mode?: string,\n  prompt?: string,\n};\n\nconst myCreateElement = createElement || unstable_createElement;\n\nconst Select = forwardRef((props: any, forwardedRef) =>\n  myCreateElement('select', props),\n);\n\nconst Picker = forwardRef<PickerProps, *>((props, forwardedRef) => {\n  const {\n    enabled,\n    onValueChange,\n    selectedValue,\n    itemStyle,\n    mode,\n    prompt,\n    dropdownIconColor,\n    ...other\n  } = props;\n\n  const hostRef = useRef(null);\n\n  const handleChange = React.useCallback<any>(\n    (e: Object) => {\n      const {selectedIndex, value} = e.target;\n      if (onValueChange) {\n        onValueChange(value, selectedIndex);\n      }\n    },\n    [onValueChange],\n  );\n\n  return (\n    // $FlowFixMe\n    <Select\n      disabled={enabled === false ? true : undefined}\n      onChange={handleChange}\n      ref={hostRef}\n      value={selectedValue}\n      {...other}\n    />\n  );\n});\n\n// $FlowFixMe\nPicker.Item = PickerItem;\n\nexport default Picker;\n"]},"metadata":{},"sourceType":"module"}