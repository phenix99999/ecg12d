{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";var InternetReachability=function InternetReachability(configuration,listener){var _this=this;_classCallCheck(this,InternetReachability);this._isInternetReachable=undefined;this._currentInternetReachabilityCheckHandler=null;this._currentTimeoutHandle=null;this._setIsInternetReachable=function(isInternetReachable){if(_this._isInternetReachable===isInternetReachable){return;}_this._isInternetReachable=isInternetReachable;_this._listener(_this._isInternetReachable);};this._setExpectsConnection=function(expectsConnection){if(_this._currentInternetReachabilityCheckHandler!==null){_this._currentInternetReachabilityCheckHandler.cancel();_this._currentInternetReachabilityCheckHandler=null;}if(_this._currentTimeoutHandle!==null){clearTimeout(_this._currentTimeoutHandle);_this._currentTimeoutHandle=null;}if(expectsConnection){if(!_this._isInternetReachable){_this._setIsInternetReachable(null);}_this._currentInternetReachabilityCheckHandler=_this._checkInternetReachability();}else{_this._setIsInternetReachable(false);}};this._checkInternetReachability=function(){var responsePromise=fetch(_this._configuration.reachabilityUrl,{method:'HEAD',cache:'no-cache'});var timeoutHandle;var timeoutPromise=new Promise(function(_,reject){timeoutHandle=setTimeout(function(){return reject('timedout');},_this._configuration.reachabilityRequestTimeout);});var cancel=function cancel(){};var cancelPromise=new Promise(function(_,reject){cancel=function cancel(){return reject('canceled');};});var promise=Promise.race([responsePromise,timeoutPromise,cancelPromise]).then(function(response){return _this._configuration.reachabilityTest(response);}).then(function(result){_this._setIsInternetReachable(result);var nextTimeoutInterval=_this._isInternetReachable?_this._configuration.reachabilityLongTimeout:_this._configuration.reachabilityShortTimeout;_this._currentTimeoutHandle=setTimeout(_this._checkInternetReachability,nextTimeoutInterval);}).catch(function(error){if(error!=='canceled'){_this._setIsInternetReachable(false);_this._currentTimeoutHandle=setTimeout(_this._checkInternetReachability,_this._configuration.reachabilityShortTimeout);}}).then(function(){clearTimeout(timeoutHandle);},function(error){clearTimeout(timeoutHandle);throw error;});return{promise:promise,cancel:cancel};};this.update=function(state){if(typeof state.isInternetReachable==='boolean'){_this._setIsInternetReachable(state.isInternetReachable);}else{_this._setExpectsConnection(state.isConnected);}};this.currentState=function(){return _this._isInternetReachable;};this.tearDown=function(){if(_this._currentInternetReachabilityCheckHandler!==null){_this._currentInternetReachabilityCheckHandler.cancel();_this._currentInternetReachabilityCheckHandler=null;}if(_this._currentTimeoutHandle!==null){clearTimeout(_this._currentTimeoutHandle);_this._currentTimeoutHandle=null;}};this._configuration=configuration;this._listener=listener;};export{InternetReachability as default};","map":{"version":3,"sources":["internetReachability.ts"],"names":["InternetReachability","_isInternetReachable","undefined","_currentInternetReachabilityCheckHandler","_currentTimeoutHandle","clearTimeout","responsePromise","fetch","method","cache","timeoutPromise","timeoutHandle","setTimeout","reject","cancel","cancelPromise","promise","Promise","nextTimeoutInterval","error","state"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    const responsePromise = fetch(this._configuration.reachabilityUrl, {\n      method: 'HEAD',\n      cache: 'no-cache',\n    });\n\n    // Create promise that will reject after the request timeout has been reached\n    let timeoutHandle: ReturnType<typeof setTimeout>;\n    const timeoutPromise = new Promise<Response>(\n      (_, reject): void => {\n        timeoutHandle = setTimeout(\n          (): void => reject('timedout'),\n          this._configuration.reachabilityRequestTimeout,\n        );\n      },\n    );\n\n    // Create promise that makes it possible to cancel a pending request through a reject\n    let cancel: () => void = (): void => {};\n    const cancelPromise = new Promise<Response>(\n      (_, reject): void => {\n        cancel = (): void => reject('canceled');\n      },\n    );\n\n    const promise = Promise.race([\n      responsePromise,\n      timeoutPromise,\n      cancelPromise,\n    ])\n      .then(\n        (response): Promise<boolean> => {\n          return this._configuration.reachabilityTest(response);\n        },\n      )\n      .then(\n        (result): void => {\n          this._setIsInternetReachable(result);\n          const nextTimeoutInterval = this._isInternetReachable\n            ? this._configuration.reachabilityLongTimeout\n            : this._configuration.reachabilityShortTimeout;\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            nextTimeoutInterval,\n          );\n        },\n      )\n      .catch(\n        (error: Error | 'timedout' | 'canceled'): void => {\n          if (error !== 'canceled') {\n            this._setIsInternetReachable(false);\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              this._configuration.reachabilityShortTimeout,\n            );\n          }\n        },\n      )\n      // Clear request timeout and propagate any errors\n      .then(\n        (): void => {\n          clearTimeout(timeoutHandle);\n        },\n        (error: Error): void => {\n          clearTimeout(timeoutHandle);\n          throw error;\n        },\n      );\n\n    return {\n      promise,\n      cancel,\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (typeof state.isInternetReachable === 'boolean') {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}